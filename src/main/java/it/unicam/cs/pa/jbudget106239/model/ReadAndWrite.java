/*
 * Copyright (c) 2020.
 * All rights reserved to Ludovico Latini. Program written entirely by Ludovico Latini for the PA1920 project, it is strictly forbidden to use this program for profit, but it can be redistributed for free in an updated version. If redistributed, the program must have the same copyright and Ludovico Latini must be mentioned.
 */

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package it.unicam.cs.pa.jbudget106239.model;

import java.io.*;
import java.text.DateFormat;
import java.util.*;

/**
 * Questa classe contiene i metodi per leggere e srivere su di un file di testo
 */
public class ReadAndWrite implements ReadAndWriteInterface {
    /**
     * Metodo che permette di scrivere stringhe in un file di testo
     * @param x nome del file
     * @param y stringa
     * @throws IOException e
     */
    public void writeToFile(String x,String y)throws IOException{
        File file = new File(x+".txt");
        if (!file.exists()){
            file.createNewFile();
        }
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(x+".txt",true));
        bufferedWriter.write(y+"\n");
        bufferedWriter.flush();
        bufferedWriter.close();
    }
    /**
     * Metodo che permette di scrivere in file di testo e di crearlo se non esiste
     * @param x testo da scrivere
     * @param y soldi da mettere
     * @param z nome del report
     */
    public void writeToFile(String x, double y, String z) throws IOException {
    Calendar calendar = Calendar.getInstance(TimeZone.getTimeZone("Europe/Rome"), Locale.ITALY);
    Date today = calendar.getTime();
    DateFormat dformat = DateFormat.getDateInstance(DateFormat.SHORT);
    File file = new File(z+".txt");
    if (!file.exists()){
        file.createNewFile();
    }
    BufferedWriter writer = new BufferedWriter(new FileWriter(z+".txt",true));
    writer.write(y+" euro : "+x+" "+dformat.format(today)+"\n");
    writer.flush();
    writer.close();

}

    /**
     * Permettere di creare un nuovo file di testo per il goal
     * @param x aim
     * @param y nome del goal
     */
    public void writeToFile (String x,double y)throws IOException{
        File file = new File(x+".txt");
        if (!file.exists()) file.createNewFile();
        BufferedWriter wr = new BufferedWriter(new FileWriter(x+".txt"));
        wr.write(String.valueOf(y));
        wr.flush();
        wr.close();
    }

    /**
     * Questo metodo permettere di leggere il budget e salvarlo in un double
     * @param x nome del goal
     * @return ritorna un valore double che corrisponde ai soldi messi da parte
     * @throws IOException se c'è un problema nella letture
     * @throws FileNotFoundException se il file non esiste
     */
   public  double readToFile(String x)  throws IOException,FileNotFoundException{
        File file = new File(x+".txt");
        if(!file.exists()){
            throw new FileNotFoundException("Il file non è stato trovato");
        }
        BufferedReader br = new BufferedReader(new FileReader(x+".txt"));
        String stringOfBudget =br.readLine();
        br.close();
       return Double.parseDouble(stringOfBudget);
    }

    /**
     * Permette di leggere un report e salvarlo in una linkedlist
     * @param z nome del file
     * @param k linkedlist in cui salvare le informazioni
     */
    public void readToFile (String z, LinkedList k) throws IOException {
    File file = new File(z+".txt");
    if(!file.exists())file.createNewFile();
        BufferedReader bufferedReader= new BufferedReader(new FileReader(z+".txt"));
        String text = null;
        while ((text = bufferedReader.readLine())!=null){
            k.addFirst("\n"+text);
        }
        bufferedReader.close();
}

    /**
     * Questo metodo permette di eliminare una riga da un file di testo, il medoto esce
     * se il file di testo non esiste
     * @param name nome del file
     * @param line srtringa da eliminare
     * @throws IOException Eccezione di Input Output
     * @throws DelException Eccezione dei parametri line o name
     */
    public void deleteLine(String name, String line)throws IOException, DelException{
        File file2 = new File(name+"temporary.txt");
        file2.createNewFile();
        File file = new File(name+".txt");
        if (!file.exists())return;
        BufferedReader bufferedReader = new BufferedReader(new FileReader(name+".txt"));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(name+"temporary.txt",true));
        String str;
        while ((str=bufferedReader.readLine())!=null){
            if (str.equals(line))continue;
            bufferedWriter.write(str + "\n");
        }
        bufferedReader.close();
        bufferedWriter.flush();
        bufferedWriter.close();
        deleteFile(name);
        file2.renameTo(file);
    }

    /**
     * Metodo che permette di eliminare una directory
     * @param x nome della directrory
     */
    public void delDir(String x){
        File file = new File(x);
        if(file.isDirectory()){
            for (File files : file.listFiles()) {
                if(files.isDirectory()) delDir(files.toString());
                else files.delete();}
            file.deleteOnExit();
        }
    }
    /**
     * Questo metodo permette di eliminare un file
     * @param x nome del file da eliminare
     */
    public boolean deleteFile (String x) throws DelException {
        File file = new File(x+".txt");
        boolean bool =file.delete();
        if (!bool){
            throw new DelException();
        }return bool;

    }
}
