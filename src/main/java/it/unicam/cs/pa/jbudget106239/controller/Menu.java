/*
 * Copyright (c) 2020.
 * All rights reserved to Ludovico Latini. Program written entirely by Ludovico Latini for the PA1920 project, it is strictly forbidden to use this program for profit, but it can be redistributed for free in an updated version. If redistributed, the program must have the same copyright and Ludovico Latini must be mentioned.
 */

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package it.unicam.cs.pa.jbudget106239.controller;
import it.unicam.cs.pa.jbudget106239.model.*;

import java.io.IOException;
import java.util.LinkedList;

/**
 * Questa classe rappresenta il controller del programma
 */
public class Menu implements MenuInterface {
    Account account = new Account();
    public double getMoney() throws IOException, SignException {
        Savings money = new Savings();
        return money.getBank();
    }
    /**
     * metodo che ritorna la lista di account creati fino ad ora
     * @return String
     */
    public LinkedList<String> getAccount(){
        return account.getListOfPath();
    }

    /**
     * Permette di selezionare un account esistente
     * @param x nome dell'account
     */
    public void selAccount(String x){
        account.setPath(x);
    }

    /**
     * Permette di creare un account nuovo
     * @param x nome dell'account
     * @param y il numero di soldi che gi√† ci sono nell'account
     */
    public void createAccount(String x, double y) throws IOException, SignException {
        Account start = new Account();
            start.newAccount(x,y);
    }

    /**
     * Permette di eliminare un account
     * @param x nome dell'account da eliminare
     */
    public void delAccount(String x) throws IOException, DelException {
            account.deleteAccount(x);
    }
    /**
     * Elimina un goal
     */
    public void deleteGoal(String str0) throws SignException, DelException, IOException {
        Goal crg = new Goal();
            crg.deleteGoal(str0);
    }

    /**
     * Compara il budget e l'aim di un goal
     */
    public String compare(String str) throws IOException, SignException {
        Goal goal = new Goal();
            return goal.control(str);
    }

    /**
     * Questo metodo permette di creare un nuovo goal
     */
    public void createGoal(String name, double aim) throws IOException, SignException {
        Goal goal = new Goal();
            goal.createNewGoal(name, aim);
    }

    public LinkedList<String> getGoal() throws IOException {
        Goal goal = new Goal();
        return goal.getGoal();
    }
    /**
     * Questo metodo permette di aggiungere budget ad un obiettivo
     */
    public void addMoneyToGoal(String name,double money) throws IOException, SignException, BankException {
        Goal goal = new Goal();
            goal.addMoney(name, money);
    }

    /**
     * Metodo che permette di togliere soldi ad un obiettivo
     */
    public void subMoneyToGoal(String name, double money) throws IOException, SignException, BankException {
        Goal goal = new Goal();
            goal.subMoney(name, money);
    }
    /**
     * Permette di aggiungere soldi
     */
    public void addMoney(double MoneyToAdd,String MotivationForReport) throws IOException, SignException {
        Savings add = new Savings();
            add.addMoney(MoneyToAdd,MotivationForReport);
    }
    /**
     * Permette di togliere soldi
     */
    public void decrementMoney(double MoneyToRemove, String MotivationForReport) throws IOException, SignException {
        Savings rem = new Savings();
            rem.subMoney(MoneyToRemove,MotivationForReport);
    }

    /**
     * Metodo che restituisce la liste delle stringhe gia create
     * @return lista
     * @throws IOException e
     */
    public LinkedList<String> getCategory() throws IOException {
        Category category = new Category();
        return category.getCategory();
    }
    /**
     * Permette di ricevere dall'utente i parametri per creare una categoria
     */
    public void AddCategory (String x) throws IOException {
        Category use = new Category();
            use.createCategory(x);
        }
    /**
     * Permette di ricevere dall'utente i parametri per stampare una categoria
     */
    public LinkedList<String> printCategory(String x) throws IOException {
        Category use = new Category();
            return use.getCategoryReport(x);
    }
    /**
     * Permette di ricevere dall'utente i parametri per aggiungere movimenti al report di una categoria
     */
    public void moneyOnCategory(double mon, String mot, String nome) throws IOException, SignException {
        Category use = new Category();
            use.subMoney(mon,mot,nome);
    }

    /**
     * Peremtte di cancellare una categoria
     */
    public void deleteCategory (String str0) throws DelException, IOException {
        Category crg = new Category();
            crg.del(str0);
    }

    /**
     * Permette di stampare il report totale
     */
    public LinkedList<String> printReport() throws IOException {
        PositiveReport pr = new PositiveReport();
            return pr.getReport();
    }
    /**
     * Permette di stampare il report positivo
     */
    public LinkedList<String> printPositiveReport() throws IOException {
        PositiveReport pr = new PositiveReport();
            return pr.getPositiveReport();
    }
    /**
     * Permette di stampare il report negativo
     */
    public LinkedList<String> printNegativeReport() throws IOException {
        NegativeReport nr = new NegativeReport();
            return nr.getNegativeReport();
    }


}
