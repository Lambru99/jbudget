/*
 * Copyright (c) 2020.
 * All rights reserved to Ludovico Latini. Program written entirely by Ludovico Latini for the PA1920 project, it is strictly forbidden to use this program for profit, but it can be redistributed for free in an updated version. If redistributed, the program must have the same copyright and Ludovico Latini must be mentioned.
 */

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package it.unicam.cs.pa.jbudget106239.view.consoleView;

import it.unicam.cs.pa.jbudget106239.controller.Menu;
import it.unicam.cs.pa.jbudget106239.model.BankException;
import it.unicam.cs.pa.jbudget106239.model.DelException;
import it.unicam.cs.pa.jbudget106239.model.SignException;

import java.io.IOException;
import java.util.Scanner;
/**
* La ConsoleView permette di far visuallizare i menu e le varie stampe.
*/
public class ConsoleView implements View {
    Menu generalMenu = new Menu();
    public void account(){
        try {
            print("Gli account creati al momento sono:");
            print(generalMenu.getAccount());
        }catch (Exception e ){
            print("Non ci sono account al momento");
        }
        choose();
    }

    /**
     * MenuInterface grafico che permette all'utente di scegliere un account selezionarlo o eliminarlo
     */
    public void choose(){
        print("1 - Seleziona accont");
        print("2 - Crea un nuovo account");
        print("3 - Elimina Account");
        print("4 - Esci");
        Scanner sc = new Scanner(System.in);
        int i = sc.nextInt();
        switch (i){
            case 1 : chaccount();break;
            case 2 : newAccount();break;
            case 3 : delAccount();break;
            case 4 : exit();break;
            default : {
                print("Comando sconosciuto");
                account();
            }break;
        }
    }

    /**
     * Questo metodo imposta il path scelto dall'utente
     */
    public void chaccount(){
        print("scrivi il nome dell'account da selezionare");
        Scanner sc = new Scanner(System.in);
        String str =sc.nextLine();
        generalMenu.selAccount(str);
        Welcome();
    }

    /**
     * Metodo che permette di ricevere tutti gli input per creare un account
     */
    public void newAccount(){
        print("Scrivi il nome del nuovo account");
        Scanner sc = new Scanner(System.in);
        String str = sc.nextLine();
        print("Quanti soldi ci sono gia dentro?");
        Scanner sc2 = new Scanner(System.in);
        double num = sc2.nextDouble();
        try {
            generalMenu.createAccount(str,num);
        } catch (IOException | SignException e) {
            print("Errore! Inserisci un numero valido e positivo");
        }
        account();
    }

    /**
     * Metodo che permette di ricevere tutti gli input per eliminare un account
     */
    public void delAccount(){
        print("scrivi il nome dell'account da selezionare");
        Scanner sc = new Scanner(System.in);
        String str = sc.nextLine();
        try {
            generalMenu.delAccount(str);
        } catch (IOException | DelException e) {
            print("Errore! Non trovo l'account da eliminare");
        }
        account();
    }

    /**
     * Da il benvenuto all'utente
     */
    public void Welcome(){
        System.out.println("____________________________");
        System.out.println("            CIAO            ");
        System.out.println("         BENVENUTO IN       ");
        System.out.println("           JBUDGET          ");
        System.out.println("____________________________");
        System.out.println("                            ");
        System.out.println("Ecco a te il menu:          ");
        menuView();
    }

    /**
     * MenuInterface iniziale riferito ad uno specifico account scelto in precedenza
     */
    @Override
    public void menuView() {
        try {
            System.out.println("\n\n\n\n\n\n\n\n\n\n\n");
            System.out.println("I tuoi soldi nella cassa attualmente sono:");
            System.out.println("   " + generalMenu.getMoney());
            System.out.println("1 - Aggiungi Soldi              ");
            System.out.println("2 - Togli Soldi                 ");
            System.out.println("3 - Apri il menu dei ReportInterface     ");
            System.out.println("4 - Apri il menu delle Categorie");
            System.out.println("5 - Apri il menu degli Obiettivi");
            System.out.println("6 - Scegli un'account diverso   ");
            System.out.println("7 - Esci                        ");
            Scanner sc = new Scanner(System.in);
            int i = sc.nextInt();
            switch (i){
                case 1 : addMoney();break;
                case 2 : decraseMoney();break;
                case 3 : reportMenu();break;
                case 4 : categoryView();break;
                case 5 : goalView();break;
                case 6 : choose();break;
                case 7 : exit();break;
                default : {
                    print("Scelta non valida");
                    menuView();
                }break;
            }
        }catch (Exception e){
            System.out.println("Comando sconosciuto");
            System.out.println("..........");
            System.out.println("..........");
            System.out.println("Riprovare!");
            menuView();
        }
    }

    /**
     * Permette di ricevere dall'utente i parametri per aggiungere soldi
     */
    public void addMoney(){
        print("Quanto vuoi aggiungere?");
        Scanner sc = new Scanner(System.in);
        double MoneyToAdd = sc.nextDouble();
        print("Scrivi qui una motivazione da aggiungere al report");
        Scanner sc2 = new Scanner(System.in);
        String MotivationForReport = sc2.nextLine();
        try {
            generalMenu.addMoney(MoneyToAdd,MotivationForReport);
        } catch (IOException | SignException e) {
            print("Errore! Inserisci un valore valido e positivo");
        }
        menuView();
    }
    /**
     * Permette di ricevere dall'utente i parametri per togliere soldi
     */
    public void decraseMoney(){
        print("Quanti soldi vuoi togliere?");
        Scanner sc = new Scanner(System.in);
        double MoneyToRemove = sc.nextDouble();
        print("Scrivi qua una motivazione");
        Scanner sc2 = new Scanner(System.in);
        String MotivationForReport = sc2.nextLine();
        try {
            generalMenu.decrementMoney(MoneyToRemove,MotivationForReport);
        } catch (IOException | SignException e) {
            print("Errore! Inserisci un valore valido e positivo");
        }
        menuView();
    }

    /**
     * MenuInterface delle categorie
     */
    @Override
    public void categoryView() {
        System.out.println("Ecco la lista degli account esistenti: ");
   try {System.out.println(generalMenu.getCategory());} catch (IOException e) {print("Errore! Non trovo nessuna categoria");}
        System.out.println("1 - Crea categoria");
        System.out.println("2 - Visualizza categoria");
        System.out.println("3 - Aggiungi movimenti ad una categoria");
        System.out.println("4 - Elimina una categoria");
        System.out.println("5 - Indietro");
        Scanner scelta = new Scanner(System.in);
        int i = scelta.nextInt();
        switch (i) {
            case 1 : addCategory();break;
            case 2 : printCantegory();break;
            case 3 : addMoneyOnCategory();break;
            case 4 : deleteCategory();break;
            case 5 : {
                menuView();
                return;
            }
            default : print("Non ho capito la tua scelta");break;
        }
        categoryView();
    }

    /**
     * Metodo che permette di raccogliere gli input per epiminare una categoria
     */
    public void deleteCategory(){
        print("Quale categoria vuoi eliminare?)");
        Scanner sc = new Scanner(System.in);
        String str0 = sc.nextLine();
        try {
            generalMenu.deleteCategory(str0);
        } catch (DelException | IOException e) {
            print("Errore! Non posso eliminare questa categoria");
        }
    }
    /**
     * Metodo che permette di raccogliere gli input per aggiungere soldi ad una categoria
     */
    public void addMoneyOnCategory(){
        print("In quale categoria vuoi aggiungere i soldi?");
        Scanner sc = new Scanner(System.in);
        String nome = sc.nextLine();
        print("Quanti soldi hai speso?");
        Scanner sc2 = new Scanner(System.in);
        double mon = sc2.nextDouble();
        print("Scrivi qua un messaggio che possa ricordarti il motivo della spesa");
        Scanner sc3 = new Scanner(System.in);
        String mot = sc3.nextLine();
        try {
            generalMenu.moneyOnCategory(mon,mot,nome);
        } catch (IOException | SignException e) {
            print("Errore! Inserisci un valore valido e positivo");
        }
    }
    /**
     * Metodo che permette di raccogliere gli input per creare una categoria
     */
    public void addCategory(){
        print("Dimmi il nome della nuova categoria");
        Scanner sc = new Scanner(System.in);
        String str =sc.nextLine();
        try {
            generalMenu.AddCategory(str);
        } catch (IOException e) {
            print("Errore! Non posso creare questa categoria");
        }
    }

    /**
     * MenuInterface dei report
     */
    public void reportMenu() {
        System.out.println("1 - Stampa report totale");
        System.out.println("2 - Stampa report positivo");
        System.out.println("3 - Stampa report negativo");
        System.out.println("4 - Stampa report di una categoria");
        System.out.println("5 - Indietro");
        Scanner sc = new Scanner(System.in);
        int i = sc.nextInt();
        switch (i) {
            case 1 : {
                try {
                    print(generalMenu.printReport());
                } catch (IOException e) {
                    print("Errore! Non posso stampare il report");
                }
            } break;
            case 2 : {
                try {
                    print(generalMenu.printPositiveReport());
                } catch (IOException e) {
                    print("Errore! Non posso stampare il report");
                }
            } break;
            case 3 : {
                try {
                    print(generalMenu.printNegativeReport());
                } catch (IOException e) {
                    print("Errore! Non posso stampare il report");
                }
            } break;
            case 4 : printCantegory();break;
            case 5 : {
                menuView();
                return;
            }
            default : print("Non capisco il comando "); break;
        }
        reportMenu();
    }
    /**
     * Metodo che permette di raccogliere gli input per stampare una categoria
     */
    public void printCantegory(){
        print("Che categoria vuoi stampare?");
        Scanner sc = new Scanner(System.in);
        String str =sc.nextLine();
        try {
            print(generalMenu.printCategory(str));
        } catch (IOException e) {
            print("Errore! Non posso stampare questa categoria");
        }

    }

    /**
     * MenuInterface degli obiettivi
     */
    @Override
    public void goalView() {
        System.out.println("Ecco la lista degli obiettivi gia creati: ");
        try {
            System.out.println(generalMenu.getGoal());
        }catch (IOException e){ print("Errore! Non trovo obiettivi da stampare");}
        System.out.println("1 - Crea un obiettivo             ");
        System.out.println("2 - Aggiungi soldi ad un obiettivo");
        System.out.println("3 - Sottrai soldi ad un obiettivo ");
        System.out.println("4 - Controlla obiettivo           ");
        System.out.println("5 - Elimina un obiettivo          ");
        System.out.println("6 - Indietro");
        Scanner sc = new Scanner(System.in);
        int i = sc.nextInt();
        switch (i) {
            case 1 : createGoal();break;
            case 2 : addMoneyToGoal();break;
            case 3 : subMoneyToGoal();break;
            case 4 : compare();break;
            case 5 : deleteGoal();break;
            case 6 : {
                menuView();
                return;
            }
            default : print("Comando Errato");break;
        }
        goalView();
    }
    /**
     * Metodo che permette di raccogliere gli input per sottrarre soldi ad un obiettivo
     */
    public void subMoneyToGoal(){
        print("A quale obiettivo vuoi togliere soldi?");
        Scanner sc = new Scanner(System.in);
        String name = sc.nextLine();
        print("Quanti soldi vuoi togliere?");
        Scanner sc2 = new Scanner(System.in);
        double money = sc2.nextDouble();
        try {
            generalMenu.subMoneyToGoal(name,money);
        } catch (IOException | SignException | BankException e) {
            print("Errore! Inserisci un valore valido e positivo");
        }
    }
    /**
     * Metodo che permette di raccogliere gli input per aggiungere soldi ad un obiettivo
     */
    public void addMoneyToGoal(){
        print("A quale obiettivo vuoi aggiungere soldi da mettere da parte?");
        Scanner sc = new Scanner(System.in);
        String name = sc.nextLine();
        print("Quanti soldi vuoi mettere da parte?");
        Scanner sc2 = new Scanner(System.in);
        double money = sc2.nextDouble();
        try {
            generalMenu.addMoneyToGoal(name,money);
        } catch (IOException | SignException e) {
            print("Errore! Inserisci un valore valido e positivo");
        } catch (BankException n) {
            print("Errore! Credito non sufficiente ");
        }
    }
    /**
     * Metodo che permette di raccogliere gli input per creare un obiettivo
     */
    public void createGoal(){
        print("Che obiettivo vuoi raggiungere (in soldi)?");
        Scanner sc = new Scanner(System.in);
        double aim = sc.nextDouble();
        print("Che nome vuoi dare all'obiettivo?");
        Scanner sc2 = new Scanner(System.in);
        String name = sc2.nextLine();
        try {
            generalMenu.createGoal(name,aim);
        } catch (IOException | SignException e) {
            print("Errore! Inserisci un valore valido e positivo");
        }
    }
    /**
     * Metodo che permette di raccogliere gli input per comparare un obiettivo
     */
    public void compare(){
        print("Quale obiettivo vuoi comparare?");
        Scanner sc = new Scanner(System.in);
        String str=sc.nextLine();
        try {
            print(generalMenu.compare(str));
        } catch (IOException | SignException e) {
            print("Errore! Non posso comparare questo obiettivo");
        }
    }
    /**
     * Metodo che permette di raccogliere gli input per epiminare un obiettivo
     */
    public void deleteGoal(){
        print("Quale obiettivo vuoi eliminare?");
        Scanner sc = new Scanner(System.in);
        String str0 = sc.nextLine();
        try {
            generalMenu.deleteGoal(str0);
        } catch (SignException | DelException | IOException e) {
            print("Errore! Non posso eliminare questo obiettivo");
        }
    }
    /**
     * Metodo che permette di stampare un generico oggetto della classe Object T
     * @param T Paramentro da stampare
     */
    public void print(Object T){
         System.out.println(T);
    }
    /**
     * Permette di chiudere il programma
     */
    public void exit(){
        print("\n\n\n\n\n\n\n\n");
        print("____________________");
        print("    ARRIVEDERCI!    ");
        print("____________________");
        print("\n\n");
    }
}
