/*
 * Copyright (c) 2020.
 * All rights reserved to Ludovico Latini. Program written entirely by Ludovico Latini for the PA1920 project, it is strictly forbidden to use this program for profit, but it can be redistributed for free in an updated version. If redistributed, the program must have the same copyright and Ludovico Latini must be mentioned.
 */

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package it.unicam.cs.pa.jbudget106239.model;

import java.io.File;
import java.io.IOException;
import java.util.LinkedList;

/**
 * Classe che permettee di creare e gestire un obiettivo
 */
public class Goal implements GoalInterface {
    LinkedList<String> goal = new LinkedList<>();
    private double aim;
    private double budget;
    ReadAndWrite readerAndWriter = new ReadAndWrite();

    public LinkedList<String> getGoal() throws IOException {
        LinkedList<String>k = new LinkedList<>();
        readerAndWriter.readToFile(Account.path+File.separator+"goal",k);
        setGoal(k);
        return goal;
    }

    public void setGoal(LinkedList<String> goal) {
        this.goal = goal;
    }
    public double getAim(String name) throws SignException, IOException {
            double money= readerAndWriter.readToFile(Account.path+File.separator+name+"aim");
            setAim(money);
        return aim;
    }

    public void setAim(double aim) throws SignException {
        if (aim<=0){
            throw new SignException(aim);
        }
        this.aim = aim;
    }

    public double getBudget(String name) throws IOException, SignException {
            double money= readerAndWriter.readToFile(Account.path+File.separator+name+"budget");
            setBudget(money);
        return budget;
    }

    public void setBudget(double budget) throws SignException {
        if (budget<0){
            throw new SignException(budget);
        }
        this.budget = budget;
    }

    @Override
    public void createNewGoal(String nameOfGoal, double aim) throws IOException, SignException {
        setAim(aim);
            readerAndWriter.writeToFile(Account.path+File.separator+nameOfGoal+"aim",aim);
            readerAndWriter.writeToFile(Account.path+File.separator+nameOfGoal+"budget",0.0);
            readerAndWriter.writeToFile(Account.path+File.separator+"goal",nameOfGoal);
    }

    @Override
    public void addMoney(String nameOfGoal, double budgetToAdd) throws SignException, IOException, BankException {
        if (budgetToAdd<0){
            throw new SignException(budgetToAdd);
        }
        Savings mon = new Savings();
        if(budgetToAdd>mon.getBank()){
            throw new BankException();
        }
        double par = readerAndWriter.readToFile(Account.path+File.separator+nameOfGoal+"budget");
            par = par + budgetToAdd;
            readerAndWriter.writeToFile(Account.path+File.separator+nameOfGoal+"budget",par);
        mon.subMoney(budgetToAdd);
    }

    @Override
    public void subMoney(String nameOfGoal, double budgetToSub) throws SignException, IOException, BankException {
        if (budgetToSub<0){
            throw new SignException(budgetToSub);
        }
        Savings mon = new Savings();
        if(budgetToSub>getBudget(nameOfGoal)){
            throw new BankException();
        }
            double par = readerAndWriter.readToFile(Account.path+File.separator+nameOfGoal+"budget");
            par = par - budgetToSub;
            readerAndWriter.writeToFile(Account.path+File.separator+nameOfGoal+"budget",par);
        mon.addMoney(budgetToSub);
    }

    @Override
    public String control(String name) throws IOException, SignException {
        double d1 = getAim(name);
        double d2 = getBudget(name);
        String text;
        if (d1==d2) {
             text = "hai raggiunto il tuo obiettivo";
        }else text = "hai risparmiato "+d2+ " su "+d1;
        return text;
    }

    @Override
    public void deleteGoal(String goal) throws IOException, DelException, SignException {
            double addToBank= readerAndWriter.readToFile(Account.path+ File.separator+goal+"budget");
            Savings mb = new Savings();
            mb.addMoney(addToBank);
            readerAndWriter.deleteFile(Account.path+File.separator+goal+"budget");
            readerAndWriter.deleteFile(Account.path+File.separator+goal+"aim");
            readerAndWriter.deleteLine(Account.path+File.separator+"goal",goal);
    }
}
