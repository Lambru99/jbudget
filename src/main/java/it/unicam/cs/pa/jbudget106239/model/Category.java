/*
 * Copyright (c) 2020.
 * All rights reserved to Ludovico Latini. Program written entirely by Ludovico Latini for the PA1920 project, it is strictly forbidden to use this program for profit, but it can be redistributed for free in an updated version. If redistributed, the program must have the same copyright and Ludovico Latini must be mentioned.
 */

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package it.unicam.cs.pa.jbudget106239.model;

import java.io.*;
import java.util.*;

/**
 * Classe che permette di creare delle categorie
 */

public class Category implements CategoryInterface {
    private LinkedList<String> CategoryReport=new LinkedList<>();

    public void setCategory(LinkedList<String> category) {
        Category = category;
    }

    private LinkedList<String> Category = new LinkedList<>();
    ReadAndWrite readerAndWriter= new ReadAndWrite();


    public LinkedList<String> getCategory() throws IOException {
        LinkedList<String> k = new LinkedList<>();
        readerAndWriter.readToFile(Account.path+File.separator+"category",k);
        setCategory(k);
        return Category;
    }
    /**
     * Restituisce la categoria che si desidera
     * @param name nome della categoria
     * @return Ritorna una LinkedList di stringhe
     */
    public LinkedList<String> getCategoryReport(String name) throws IOException {
        readerAndWriter.readToFile(Account.path+File.separator+name,CategoryReport);
        return CategoryReport;
    }

    /**
     * Essendo la gategoria un raggruppamento di spese con il metodo sub_money posso aggiungere soldi da sottrarre
     * dalla banca, una motivazione e il nome della categoria per cui ho speso i soldi
     * @param money i soldi che ho speso
     * @param text motivazione
     * @param name nome del report, cio√® della categoria a cui vogglio aggiungere questo movimento
     */
    public void subMoney(double money, String text, String name) throws SignException, IOException {
        if (money<0){throw new SignException(money);}
            File ControllFile = new File(Account.path+File.separator+"bank.txt");
            if (!ControllFile.exists()){
                System.err.print("Non sono mai stati aggiunti soldi alla cassa");
            }
            double FileOfMoney = readerAndWriter.readToFile(Account.path+File.separator+"bank") - money;
            Savings FileBank = new Savings();
            FileBank.setBank(FileOfMoney);
            readerAndWriter.writeToFile(Account.path+File.separator+"bank",FileOfMoney);
        writeOnReport(money,text,name);
    }

    /**
     * Permette di scrivere il report della categoria, il report generale e il report negativo
     * @param money Quanti soldi scrivere sul report
     * @param report il nome da dare al report
     * @param name il messaggio da accompagnare con la spesa
     */
    public void writeOnReport(double money, String report, String name) throws SignException, IOException {
        if (money<0){
            throw new SignException(money);
        }
        double negativemoney = money*-1;
        readerAndWriter.writeToFile(report,negativemoney,Account.path+File.separator+name);
        readerAndWriter.writeToFile(report,negativemoney,Account.path+File.separator+"report");
        readerAndWriter.writeToFile(report,negativemoney,Account.path+File.separator+"negativereport");
    }

    /**
     * Crea una nuova categoria
     * @param name nome della categoria
     */
    public void createCategory (String name) throws IOException {
            File newCategory = new File(Account.path+File.separator+name + ".txt");
            readerAndWriter.writeToFile(Account.path+File.separator+"category",name);
            if (newCategory.exists()) {
                System.err.print("Questa categoria gia esiste");
            } else newCategory.createNewFile();
    }
    public boolean del (String name) throws DelException, IOException {
        boolean ver=readerAndWriter.deleteFile(Account.path+File.separator+name);
        readerAndWriter.deleteLine(Account.path+File.separator+"category",name);
        if (!ver){
            throw new DelException();
        }
        return true;
    }
}
