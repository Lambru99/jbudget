/*
 * Copyright (c) 2020.
 * All rights reserved to Ludovico Latini. Program written entirely by Ludovico Latini for the PA1920 project, it is strictly forbidden to use this program for profit, but it can be redistributed for free in an updated version. If redistributed, the program must have the same copyright and Ludovico Latini must be mentioned.
 */

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package it.unicam.cs.pa.jbudget106239.model;

import java.io.*;
import java.util.*;

/**
 * Classe che permette di memorizzare i report negativi
 */
public class NegativeReport implements ReportInterface {
    ReadAndWrite readerAndWriter= new ReadAndWrite();
    private LinkedList<String> report = new LinkedList<>();
    private LinkedList<String> NegativeReport = new LinkedList();

    /**
     * Ritorna il report totale
     * @return il report
     */
    public LinkedList<String> getReport() throws IOException {
            readerAndWriter.readToFile(Account.path+File.separator+"report",report);
        return report;

    }

    public void setReport(LinkedList report) {
        this.report = report;
    }

    /**
     * Scrive text nel report totale aggiungendo un meno davanti al valore dei soldi
     * e richiama WriteOnNegativeReport()
     * @param text cosa scrivere
     * @param money quanti soldi
     */
    public void writeOnReport(String text, double money) throws IOException, SignException {
        if (money<0){
            throw new SignException(money);
        }
            double negativemoney = money * -1;
            readerAndWriter.writeToFile(text,negativemoney,Account.path+File.separator+"report");
            writeOnNegativeReport(text,money);
    }

    /**
     * Scrive text nel report negativo mettendo un meno davanti al valore dei soldi
     * @param text testo da scrivere
     * @param money soldi da inserire
     * @throws IOException Eccezione di Input Output
     * @throws SignException Eccezione di segno per parametro money
     */
    public void writeOnNegativeReport(String text, double money) throws IOException, SignException {
        if (money<0){
            throw new SignException(money);
        }
            double negativemoney = money *-1;
            readerAndWriter.writeToFile(text,negativemoney,Account.path+File.separator+"negativereport");
    }

    /**
     * Ritorna il report negativo
     * @return ritorna il negative report
     * @throws IOException Eccezione di Input Output
     */
    public LinkedList<String> getNegativeReport() throws IOException {
            readerAndWriter.readToFile(Account.path+File.separator+"negativereport",NegativeReport);
        return NegativeReport;
    }

    /**
     * Metodo untilizzato per eliminare il negative report
     * @param name nome del report
     * @return true o false
     * @throws DelException se name non pu√≤ essere eliminato
     */
    public boolean del (String name) throws DelException {
        boolean ver=readerAndWriter.deleteFile(Account.path+File.separator+name);
        if (!ver){
            throw new DelException();
        }
        return true;
    }
}
